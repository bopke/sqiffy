package com.dzikoysk.sqiffy

import com.dzikoysk.sqiffy.changelog.Changelog
import com.dzikoysk.sqiffy.changelog.ChangelogBuilder
import com.dzikoysk.sqiffy.changelog.generator.SqlSchemeGenerator
import com.dzikoysk.sqiffy.changelog.generator.dialects.getSchemeGenerator
import com.dzikoysk.sqiffy.dsl.Table
import com.dzikoysk.sqiffy.dsl.TableWithAutogeneratedKey
import com.dzikoysk.sqiffy.dsl.Values
import com.dzikoysk.sqiffy.dsl.generator.SqlQueryGenerator
import com.dzikoysk.sqiffy.dsl.statements.AutogeneratedKeyInsertStatement
import com.dzikoysk.sqiffy.dsl.statements.DeleteStatement
import com.dzikoysk.sqiffy.dsl.statements.InsertStatement
import com.dzikoysk.sqiffy.dsl.statements.SelectStatement
import com.dzikoysk.sqiffy.dsl.statements.UpdateStatement
import com.dzikoysk.sqiffy.dsl.statements.UpdateValues
import com.dzikoysk.sqiffy.migrator.Migrator
import com.zaxxer.hikari.HikariDataSource
import java.io.Closeable
import kotlin.reflect.KClass
import org.jdbi.v3.core.Jdbi

data class SqiffyDatabaseConfig(
    val logger: SqiffyLogger = StdoutSqiffyLogger(),
    val dialect: Dialect,
    val dataSource: HikariDataSource,
    val sqlSchemeGenerator: SqlSchemeGenerator = dialect.getSchemeGenerator(),
    val sqlQueryGenerator: SqlQueryGenerator,
    val localJdbi: Jdbi,
    val changelogBuilder: ChangelogBuilder,
)

abstract class SqiffyDatabase(state: SqiffyDatabaseConfig) : Closeable {

    internal val logger: SqiffyLogger = state.logger
    internal val dialect: Dialect = state.dialect
    internal val dataSource: HikariDataSource = state.dataSource
    internal val sqlSchemeGenerator: SqlSchemeGenerator = state.sqlSchemeGenerator
    internal val sqlQueryGenerator: SqlQueryGenerator = state.sqlQueryGenerator
    internal val localJdbi: Jdbi = state.localJdbi
    internal val changelogBuilder: ChangelogBuilder = state.changelogBuilder

    fun generateChangeLog(vararg classes: KClass<*>): Changelog =
        changelogBuilder.generateChangeLogAtRuntime(tables = classes.toList())

    fun <RESULT> runMigrations(migrator: Migrator<RESULT>): RESULT =
        migrator.runMigrations(this)

    fun select(table: Table): SelectStatement =
        SelectStatement(this, table)

    fun insert(table: TableWithAutogeneratedKey, values: (Values) -> Unit): AutogeneratedKeyInsertStatement =
        AutogeneratedKeyInsertStatement(this, table, Values().also { values.invoke(it) })

    fun insert(table: Table, values: (Values) -> Unit): InsertStatement =
        InsertStatement(this, table, Values().also { values.invoke(it) })

    fun update(table: Table, values: (UpdateValues) -> Unit): UpdateStatement =
        UpdateStatement(this, table, UpdateValues().also { values.invoke(it) })

    fun delete(table: Table): DeleteStatement =
        DeleteStatement(this, table)

    fun getJdbi(): Jdbi =
        localJdbi

    fun getDialect(): Dialect =
        dialect

    override fun close() {
        dataSource.close()
    }

}